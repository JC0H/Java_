  Как правило компьютеры и программы, входящие в состав информационной системы, не являются равноправными. Некоторые из
них владеют ресурсами (файловая система, процессор, принтер, база данных и т.д.), другие имеют возможность обращаться к
этим ресурсам. Компьютер (или программу), управляющий ресурсом, называют сервером этого ресурса (файл-сервер, сервер
базы данных, вычислительный сервер...). Клиент и сервер какого-либо ресурса могут находится как на одном компьютере,
так и на различных компьютерах, связанных сетью.

  Самий банальний приклад клієнс-серверної архітектури це звичайний браузер.Браузер являється клієнтом!!! для того щоб ви
могли відкривати певні сайти які лежать на серверах, і ця клієнт серверна взаємодія дає можливість працювати нам в сеті
інтернет і користуватися хз ресурсами.
  Інший приклад це месенджер - Skype, Viber і тд. У вас є клієнться програма на телефоні і сервер який допомагає обміню-
ватися повідомленнями, пропускаючи їх через себе і адресують іншим людям.
  Комп ігри - якшо граєте по сеті то повинен бути сервер котрий допомогає вам спілкуватися між собою .

Можна виділити двухрівневу архітектуру (клієнст-> сервер (клієнт не пользователь, а программа якою користується наш юзер))

  Клієнт  --request-->  |
          <-response--  |Server
  Клієнт                |

І трьохріневу архітектуру :

  Клієнт  --request-->  |Web App| -----> | Database |
          <-response--  |Server | <----- | Server   |
  Клієнт                |       |        |          |

Web App Server - портрібний для швидкої оброботки запросів клієнта.
Database Server - пеаний обьєм данних певний час треба зберігати - потр
 Суть многоуровневой архитектуры заключается в том, что запрос клиента обрабатывается сразу несколькими серверами.
Такой подход позволяет значительно снизить нагрузку на сервер из-за того, что происходит распределение операций, но в
то же самое время данный подход не такой надежный, как двухзвенная архитектура.

  Клиент и сервер взаимодействую друг с другом в сети Интернет или в любой другой компьютерной сети при помощи различных
сетевых протоколов, например, IP протокол, HTTP протокол, FTP и другие. Протоколов на самом деле очень много и каждый
протокол позволяет оказывать ту или иную услугу. Например, при помощи HTTP протокола браузер отправляет специальное HTTP
сообщение (GET, POST, HEAD, CONNECT, PUT, DELETE, OPTIONS и TRACE), в котором указано какую информацию и в каком виде он
хочет получить от сервера, сервер, получив такое сообщение, отсылает браузеру в ответ похожее по структуре сообщение
(или несколько сообщений),
 1  1xx: информационный код состояния HTTP сервера
 Все коды состояний, начинающиеся с единицы говорят клиенту о том, что их запрос получен и находится в обработке  и
называются они — информационные коды состояния.
 2	2xx: успешный код состояния HTTP сервера
 Все коды состояний, начинающиеся с двойки говорят клиенту о том, что действие закончилось успешно: получено, понято и
обработано, такие коды называются успешные HTTP коды.
 3	3xx: код перенаправления HTTP сервера
 Все коды состояния, начинающиеся с тройки говорят клиенту о том, что для продолжения работы ему нужно совершить какие-то
действия, это коды получили название кодов перенаправления HTTP сервера.
 4	4xx: коды ошибок HTTP клиента
 Все коды состояния, начинающиеся с четверки говорят нам о том, что ошибка происходит по вине клиента (неверный синтаксис,
устаревший протокол и прочее), из-за чего сервер не может корректно отработать и дать ответ. Их называют коды ошибок HTTP клиента.
 5	5xx: коды ошибок HTTP сервера
 Все коды состояний, начинающиеся с пятерки, говорят нам о том, что произошла ошибка на стороне сервера HTTP. И они
получили называние коды ошибок HTTP сервера.в котором содержится нужная информация, обычно это HTML документ.

  Архитектура клиент-сервер определяет лишь общие принципы взаимодействия между компьютерами, детали взаимодействия
определяют различные протоколы. Данная концепция нам говорит, что нужно разделять машины в сети на клиентские, которым
всегда что-то надо и на серверные, которые дают то, что надо. При этом взаимодействие всегда начинает клиент, а правила,
по которым происходит взаимодействие описывает протокол.